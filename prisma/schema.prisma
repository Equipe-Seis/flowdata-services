//comandos 
//npx prisma migrate dev --name add-person-class
//npx prisma generate
generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Person {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(100)
  personType      PersonType
  
  documentNumber  String     @unique @db.VarChar(20)
  birthDate       DateTime?
  status          Status     @default(active)

  email           String?    @unique

  Customer       Customer?
  Supplier       Supplier?
  User           User?

  adresses Address[]
  contacts Contact[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  hash  String

  personId   Int       @unique
  person     Person    @relation(fields: [personId], references: [id])

  userProfiles UserProfile[]
}

model Customer {
  id          Int     @id @default(autoincrement())
  creditLimit Float

  personId   Int       @unique
  person     Person    @relation(fields: [personId], references: [id])

  
}


model Supplier {
  id          Int        @id @default(autoincrement())

  tradeName   String?
  openingDate DateTime?

  type        String?
  size        String?
  legalNature String?
  
  createdAt   DateTime   @default(now())

  personId   Int       @unique
  person     Person    @relation(fields: [personId], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  district   String
  city       String
  state      String
  postalCode String
  
  linkType    LinkType

  personId   Int
  person     Person  @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
}

model Contact {
  id         Int          @id @default(autoincrement())
  
  primary    Boolean      @default(false)
  type       ContactType
  value      String       @db.VarChar(150)
  note       String?      @db.VarChar(255)

  linkType    LinkType

  personId   Int
  person     Person       @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
}

model Profile {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(50)
  description String           @db.VarChar(255)

  users       UserProfile[]    
  permissions ProfilePermission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  description String           @db.VarChar(255)

  profiles    ProfilePermission[]
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    Int
  profileId Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([profileId])
}

model ProfilePermission {
  id          Int         @id @default(autoincrement())
  profileId   Int
  permissionId Int

  profile     Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  permission  Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([permissionId])
}

model SupplyItem {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  description String?
  price       Float
  createdAt   DateTime @default(now())
}

enum Status {
  active
  inactive
}

enum PersonType {
  individual
  legalentity
}

enum ContactType {
  phone
  mobile
  email
  whatsapp
}

enum LinkType {
  customer
  supplier
  person
}


