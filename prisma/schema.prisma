generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  personType PersonType

  documentNumber String    @unique @db.VarChar(20)
  birthDate      DateTime?
  status         Status    @default(active)

  email String? @unique

  Customer Customer?
  Supplier Supplier?
  User     User?

  addresses Address[]
  contacts  Contact[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  hash String

  personId Int    @unique
  person   Person @relation(fields: [personId], references: [id])

  userProfiles UserProfile[]
}

model Customer {
  id          Int   @id @default(autoincrement())
  creditLimit Float

  personId Int    @unique
  person   Person @relation(fields: [personId], references: [id])
}

model Supplier {
  id Int @id @default(autoincrement())

  tradeName   String?
  openingDate DateTime?

  type        String?
  size        String?
  legalNature String?

  createdAt DateTime @default(now())

  personId Int    @unique

  person   Person @relation(fields: [personId], references: [id])

  supplyItems SupplyItem[]
}

model Address {
  id         Int    @id @default(autoincrement())
  street     String
  district   String
  city       String
  state      String
  postalCode String

  linkType LinkType

  personId Int
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
}

model Contact {
  id Int @id @default(autoincrement())

  primary Boolean     @default(false)
  type    ContactType
  value   String      @db.VarChar(150)
  note    String?     @db.VarChar(255)

  linkType LinkType

  personId Int
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
}

model Profile {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(50)
  description String @db.VarChar(255)

  users       UserProfile[]
  permissions ProfilePermission[]
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(100)
  description String @db.VarChar(255)

  profiles ProfilePermission[]
}

model UserProfile {
  id        Int @id @default(autoincrement())
  userId    Int
  profileId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([profileId])
}

model ProfilePermission {
  profileId    Int
  permissionId Int

  profile    Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([profileId, permissionId])
  @@index([profileId])
  @@index([permissionId])
}

model SupplyItem {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  description String?
  price       Float
  createdAt   DateTime @default(now())
  type        String   @default("Indefinido")
  status      Status   @default(active)

  supplierId  Int
  supplier    Supplier   @relation(fields: [supplierId], references: [id], onDelete: NoAction)

  checkingLines       CheckingLine[]
  inventTransferLine  InventTransferLine[]
  inventSum           InventSum[]
  inventBatchHistory  InventSumHistory[]
}

model Checking {
  id            Int             @id @default(autoincrement())
  receiptDate   DateTime        @default(now())
  status        CheckingStatus  @default(draft) 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())

  lines         CheckingLine[]
}

model CheckingLine {
  id            Int             @id @default(autoincrement())
  checkingId    Int
  supplyItemId  Int         
  receivedQty   Decimal
  unitOfMeasure UnitOfMeasure 

  supplyItem  SupplyItem @relation(fields: [supplyItemId], references: [id], onDelete: NoAction)
  
  checking Checking @relation(fields: [checkingId], references: [id], onDelete: Cascade)

  inventTransferLines  InventTransferLine[]
}

model InventTransfer {
  id            Int             @id @default(autoincrement())
  transferType  TransferType

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())

  inventTransferLines InventTransferLine[]
}

model InventTransferLine {
  id                  Int         @id @default(autoincrement())
  transferQty         Decimal 
  unitOfMeasure       UnitOfMeasure 

  inventTransferId    Int
  supplyItemId        Int
  checkingLineId      Int?

  checkingLine    CheckingLine?   @relation(fields: [checkingLineId], references: [id], onDelete: NoAction)
  inventTransfer  InventTransfer  @relation(fields: [inventTransferId], references: [id], onDelete: Cascade)
  supplyItem      SupplyItem      @relation(fields: [supplyItemId], references: [id], onDelete: Cascade)

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now())

  inventSumHistory  InventSumHistory[]
}

model InventSum {
  id                  Int         @id @default(autoincrement())
  supplyItemId        Int
  unitOfMeasure       UnitOfMeasure 
  quantity            Decimal 

  updatedAt           DateTime          @default(now())

  supplyItem           SupplyItem  @relation(fields: [supplyItemId], references: [id], onDelete: Cascade)
}

model InventSumHistory {
  id                  Int         @id @default(autoincrement())
  unitOfMeasure       UnitOfMeasure
  previousQty         Decimal
  newQty              Decimal
  changedQty          Decimal
  changeDate          DateTime       @default(now())  

  supplyItemId        Int
  supplyItem           SupplyItem  @relation(fields: [supplyItemId], references: [id], onDelete: Cascade)

  transferLineId      Int
  transferLine        InventTransferLine  @relation(fields: [transferLineId], references: [id], onDelete: NoAction)
}

model InventTransferErrors {
  id           String   @id @default(uuid())
  originalId   String
  retried      Boolean  @default(false)
  success      Boolean  @default(false)
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model InventSumBatchCheckpoint {
  id                      Int         @id @default(autoincrement())

  lastProcessedTransferId Int
}

enum TransferType {
  inbound
  outbound
}

enum UnitOfMeasure {
  KG
  UN
} 

enum CheckingStatus {
 draft
 received 
 cancelled
}

enum Status {
  active
  inactive
}

enum PersonType {
  individual
  legalentity
}

enum ContactType {
  phone
  mobile
  email
  whatsapp
}

enum LinkType {
  customer
  supplier
  person
}
